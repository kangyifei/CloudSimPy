<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="666" onload="init(evt)" viewBox="0 0 1200 666" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="666" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="40.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="655.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;module&gt; (pandas\core\api.py:29) (14 samples, 1.83%)</title><rect x="2.0942%" y="356" width="1.8325%" height="15" fill="rgb(227,0,7)"/><text x="2.3442%" y="366.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (14 samples, 1.83%)</title><rect x="2.0942%" y="372" width="1.8325%" height="15" fill="rgb(217,0,24)"/><text x="2.3442%" y="382.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (12 samples, 1.57%)</title><rect x="2.3560%" y="388" width="1.5707%" height="15" fill="rgb(221,193,54)"/><text x="2.6060%" y="398.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (12 samples, 1.57%)</title><rect x="2.3560%" y="404" width="1.5707%" height="15" fill="rgb(248,212,6)"/><text x="2.6060%" y="414.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (12 samples, 1.57%)</title><rect x="2.3560%" y="420" width="1.5707%" height="15" fill="rgb(208,68,35)"/><text x="2.6060%" y="430.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (12 samples, 1.57%)</title><rect x="2.3560%" y="436" width="1.5707%" height="15" fill="rgb(232,128,0)"/><text x="2.6060%" y="446.50"></text></g><g><title>&lt;module&gt; (pandas\core\groupby\__init__.py:1) (12 samples, 1.57%)</title><rect x="2.3560%" y="452" width="1.5707%" height="15" fill="rgb(207,160,47)"/><text x="2.6060%" y="462.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (12 samples, 1.57%)</title><rect x="2.3560%" y="468" width="1.5707%" height="15" fill="rgb(228,23,34)"/><text x="2.6060%" y="478.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (12 samples, 1.57%)</title><rect x="2.3560%" y="484" width="1.5707%" height="15" fill="rgb(218,30,26)"/><text x="2.6060%" y="494.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (12 samples, 1.57%)</title><rect x="2.3560%" y="500" width="1.5707%" height="15" fill="rgb(220,122,19)"/><text x="2.6060%" y="510.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (12 samples, 1.57%)</title><rect x="2.3560%" y="516" width="1.5707%" height="15" fill="rgb(250,228,42)"/><text x="2.6060%" y="526.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (12 samples, 1.57%)</title><rect x="2.3560%" y="532" width="1.5707%" height="15" fill="rgb(240,193,28)"/><text x="2.6060%" y="542.50"></text></g><g><title>&lt;module&gt; (pandas\core\groupby\generic.py:60) (12 samples, 1.57%)</title><rect x="2.3560%" y="548" width="1.5707%" height="15" fill="rgb(216,20,37)"/><text x="2.6060%" y="558.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (12 samples, 1.57%)</title><rect x="2.3560%" y="564" width="1.5707%" height="15" fill="rgb(206,188,39)"/><text x="2.6060%" y="574.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (12 samples, 1.57%)</title><rect x="2.3560%" y="580" width="1.5707%" height="15" fill="rgb(217,207,13)"/><text x="2.6060%" y="590.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (12 samples, 1.57%)</title><rect x="2.3560%" y="596" width="1.5707%" height="15" fill="rgb(231,73,38)"/><text x="2.6060%" y="606.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (12 samples, 1.57%)</title><rect x="2.3560%" y="612" width="1.5707%" height="15" fill="rgb(225,20,46)"/><text x="2.6060%" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (12 samples, 1.57%)</title><rect x="2.3560%" y="628" width="1.5707%" height="15" fill="rgb(210,31,41)"/><text x="2.6060%" y="638.50"></text></g><g><title>&lt;module&gt; (playground\Non_DAG_with_Energy\utils\csv_reader.py:2) (32 samples, 4.19%)</title><rect x="0.0000%" y="164" width="4.1885%" height="15" fill="rgb(221,200,47)"/><text x="0.2500%" y="174.50">&lt;modu..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (32 samples, 4.19%)</title><rect x="0.0000%" y="180" width="4.1885%" height="15" fill="rgb(226,26,5)"/><text x="0.2500%" y="190.50">_find..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (32 samples, 4.19%)</title><rect x="0.0000%" y="196" width="4.1885%" height="15" fill="rgb(249,33,26)"/><text x="0.2500%" y="206.50">_find..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (32 samples, 4.19%)</title><rect x="0.0000%" y="212" width="4.1885%" height="15" fill="rgb(235,183,28)"/><text x="0.2500%" y="222.50">_load..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (32 samples, 4.19%)</title><rect x="0.0000%" y="228" width="4.1885%" height="15" fill="rgb(221,5,38)"/><text x="0.2500%" y="238.50">exec_..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (32 samples, 4.19%)</title><rect x="0.0000%" y="244" width="4.1885%" height="15" fill="rgb(247,18,42)"/><text x="0.2500%" y="254.50">_call..</text></g><g><title>&lt;module&gt; (pandas\__init__.py:55) (22 samples, 2.88%)</title><rect x="1.3089%" y="260" width="2.8796%" height="15" fill="rgb(241,131,45)"/><text x="1.5589%" y="270.50">&lt;m..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (22 samples, 2.88%)</title><rect x="1.3089%" y="276" width="2.8796%" height="15" fill="rgb(249,31,29)"/><text x="1.5589%" y="286.50">_f..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (22 samples, 2.88%)</title><rect x="1.3089%" y="292" width="2.8796%" height="15" fill="rgb(225,111,53)"/><text x="1.5589%" y="302.50">_f..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (22 samples, 2.88%)</title><rect x="1.3089%" y="308" width="2.8796%" height="15" fill="rgb(238,160,17)"/><text x="1.5589%" y="318.50">_l..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (22 samples, 2.88%)</title><rect x="1.3089%" y="324" width="2.8796%" height="15" fill="rgb(214,148,48)"/><text x="1.5589%" y="334.50">ex..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (22 samples, 2.88%)</title><rect x="1.3089%" y="340" width="2.8796%" height="15" fill="rgb(232,36,49)"/><text x="1.5589%" y="350.50">_c..</text></g><g><title>&lt;module&gt; (test_simulation.py:10) (33 samples, 4.32%)</title><rect x="0.0000%" y="68" width="4.3194%" height="15" fill="rgb(209,103,24)"/><text x="0.2500%" y="78.50">&lt;modu..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (33 samples, 4.32%)</title><rect x="0.0000%" y="84" width="4.3194%" height="15" fill="rgb(229,88,8)"/><text x="0.2500%" y="94.50">_find..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (33 samples, 4.32%)</title><rect x="0.0000%" y="100" width="4.3194%" height="15" fill="rgb(213,181,19)"/><text x="0.2500%" y="110.50">_find..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (33 samples, 4.32%)</title><rect x="0.0000%" y="116" width="4.3194%" height="15" fill="rgb(254,191,54)"/><text x="0.2500%" y="126.50">_load..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (33 samples, 4.32%)</title><rect x="0.0000%" y="132" width="4.3194%" height="15" fill="rgb(241,83,37)"/><text x="0.2500%" y="142.50">exec_..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (33 samples, 4.32%)</title><rect x="0.0000%" y="148" width="4.3194%" height="15" fill="rgb(233,36,39)"/><text x="0.2500%" y="158.50">_call..</text></g><g><title>_getitem_axis (pandas\core\indexing.py:2138) (8 samples, 1.05%)</title><rect x="6.5445%" y="116" width="1.0471%" height="15" fill="rgb(226,3,54)"/><text x="6.7945%" y="126.50"></text></g><g><title>find_common_type (pandas\core\dtypes\cast.py:1367) (11 samples, 1.44%)</title><rect x="8.6387%" y="196" width="1.4398%" height="15" fill="rgb(245,192,40)"/><text x="8.8887%" y="206.50"></text></g><g><title>is_bool_dtype (pandas\core\dtypes\common.py:1493) (16 samples, 2.09%)</title><rect x="12.6963%" y="228" width="2.0942%" height="15" fill="rgb(238,167,29)"/><text x="12.9463%" y="238.50">i..</text></g><g><title>is_extension_array_dtype (pandas\core\dtypes\common.py:1611) (11 samples, 1.44%)</title><rect x="13.3508%" y="244" width="1.4398%" height="15" fill="rgb(232,182,51)"/><text x="13.6008%" y="254.50"></text></g><g><title>find_common_type (pandas\core\dtypes\cast.py:1381) (29 samples, 3.80%)</title><rect x="11.3874%" y="196" width="3.7958%" height="15" fill="rgb(231,60,39)"/><text x="11.6374%" y="206.50">find..</text></g><g><title>&lt;genexpr&gt; (pandas\core\dtypes\cast.py:1381) (29 samples, 3.80%)</title><rect x="11.3874%" y="212" width="3.7958%" height="15" fill="rgb(208,69,12)"/><text x="11.6374%" y="222.50">&lt;gen..</text></g><g><title>_can_coerce_all (numpy\core\numerictypes.py:586) (10 samples, 1.31%)</title><rect x="16.3613%" y="228" width="1.3089%" height="15" fill="rgb(235,93,37)"/><text x="16.6113%" y="238.50"></text></g><g><title>_can_coerce_all (numpy\core\numerictypes.py:587) (16 samples, 2.09%)</title><rect x="17.6702%" y="228" width="2.0942%" height="15" fill="rgb(213,116,39)"/><text x="17.9202%" y="238.50">_..</text></g><g><title>&lt;listcomp&gt; (numpy\core\numerictypes.py:587) (13 samples, 1.70%)</title><rect x="18.0628%" y="244" width="1.7016%" height="15" fill="rgb(222,207,29)"/><text x="18.3128%" y="254.50"></text></g><g><title>find_common_type (numpy\core\numerictypes.py:657) (33 samples, 4.32%)</title><rect x="15.7068%" y="212" width="4.3194%" height="15" fill="rgb(206,96,30)"/><text x="15.9568%" y="222.50">find_..</text></g><g><title>fast_xs (pandas\core\internals\managers.py:907) (90 samples, 11.78%)</title><rect x="8.3770%" y="164" width="11.7801%" height="15" fill="rgb(218,138,4)"/><text x="8.6270%" y="174.50">fast_xs (pandas\c..</text></g><g><title>_interleaved_dtype (pandas\core\internals\managers.py:1872) (90 samples, 11.78%)</title><rect x="8.3770%" y="180" width="11.7801%" height="15" fill="rgb(250,191,14)"/><text x="8.6270%" y="190.50">_interleaved_dtyp..</text></g><g><title>find_common_type (pandas\core\dtypes\cast.py:1387) (38 samples, 4.97%)</title><rect x="15.1832%" y="196" width="4.9738%" height="15" fill="rgb(239,60,40)"/><text x="15.4332%" y="206.50">find_c..</text></g><g><title>fast_xs (pandas\core\internals\managers.py:919) (35 samples, 4.58%)</title><rect x="21.7277%" y="164" width="4.5812%" height="15" fill="rgb(206,27,48)"/><text x="21.9777%" y="174.50">fast_..</text></g><g><title>fast_xs (pandas\core\internals\managers.py:920) (13 samples, 1.70%)</title><rect x="26.3089%" y="164" width="1.7016%" height="15" fill="rgb(225,35,8)"/><text x="26.5589%" y="174.50"></text></g><g><title>_ixs (pandas\core\frame.py:2735) (155 samples, 20.29%)</title><rect x="7.8534%" y="148" width="20.2880%" height="15" fill="rgb(250,213,24)"/><text x="8.1034%" y="158.50">_ixs (pandas\core\frame.py:2735)</text></g><g><title>_try_cast (pandas\core\construction.py:528) (32 samples, 4.19%)</title><rect x="33.9005%" y="196" width="4.1885%" height="15" fill="rgb(247,123,22)"/><text x="34.1505%" y="206.50">_try_..</text></g><g><title>maybe_castable (pandas\core\dtypes\cast.py:1099) (31 samples, 4.06%)</title><rect x="34.0314%" y="212" width="4.0576%" height="15" fill="rgb(231,138,38)"/><text x="34.2814%" y="222.50">mayb..</text></g><g><title>_try_cast (pandas\core\construction.py:537) (23 samples, 3.01%)</title><rect x="38.0890%" y="196" width="3.0105%" height="15" fill="rgb(231,145,46)"/><text x="38.3390%" y="206.50">_tr..</text></g><g><title>sanitize_array (pandas\core\construction.py:424) (66 samples, 8.64%)</title><rect x="33.7696%" y="180" width="8.6387%" height="15" fill="rgb(251,118,11)"/><text x="34.0196%" y="190.50">sanitize_arr..</text></g><g><title>sanitize_array (pandas\core\construction.py:486) (9 samples, 1.18%)</title><rect x="42.4084%" y="180" width="1.1780%" height="15" fill="rgb(217,147,25)"/><text x="42.6584%" y="190.50"></text></g><g><title>__init__ (pandas\core\series.py:305) (91 samples, 11.91%)</title><rect x="31.9372%" y="164" width="11.9110%" height="15" fill="rgb(247,81,37)"/><text x="32.1872%" y="174.50">__init__ (pandas\c..</text></g><g><title>get_block_type (pandas\core\internals\blocks.py:3007) (13 samples, 1.70%)</title><rect x="46.7277%" y="212" width="1.7016%" height="15" fill="rgb(209,12,38)"/><text x="46.9777%" y="222.50"></text></g><g><title>make_block (pandas\core\internals\blocks.py:3040) (32 samples, 4.19%)</title><rect x="45.0262%" y="196" width="4.1885%" height="15" fill="rgb(227,1,9)"/><text x="45.2762%" y="206.50">make_..</text></g><g><title>__init__ (pandas\core\internals\managers.py:1513) (45 samples, 5.89%)</title><rect x="44.6335%" y="180" width="5.8901%" height="15" fill="rgb(248,47,43)"/><text x="44.8835%" y="190.50">__init_..</text></g><g><title>make_block (pandas\core\internals\blocks.py:3047) (10 samples, 1.31%)</title><rect x="49.2147%" y="196" width="1.3089%" height="15" fill="rgb(221,10,30)"/><text x="49.4647%" y="206.50"></text></g><g><title>__init__ (pandas\core\series.py:307) (52 samples, 6.81%)</title><rect x="43.8482%" y="164" width="6.8063%" height="15" fill="rgb(210,229,1)"/><text x="44.0982%" y="174.50">__init__ ..</text></g><g><title>__init__ (pandas\core\series.py:310) (14 samples, 1.83%)</title><rect x="51.4398%" y="164" width="1.8325%" height="15" fill="rgb(222,148,37)"/><text x="51.6898%" y="174.50">_..</text></g><g><title>_ixs (pandas\core\frame.py:2743) (188 samples, 24.61%)</title><rect x="28.7958%" y="148" width="24.6073%" height="15" fill="rgb(234,67,33)"/><text x="29.0458%" y="158.50">_ixs (pandas\core\frame.py:2743)</text></g><g><title>__getitem__ (pandas\core\indexing.py:1768) (371 samples, 48.56%)</title><rect x="5.2356%" y="100" width="48.5602%" height="15" fill="rgb(247,98,35)"/><text x="5.4856%" y="110.50">__getitem__ (pandas\core\indexing.py:1768)</text></g><g><title>_getitem_axis (pandas\core\indexing.py:2140) (353 samples, 46.20%)</title><rect x="7.5916%" y="116" width="46.2042%" height="15" fill="rgb(247,138,52)"/><text x="7.8416%" y="126.50">_getitem_axis (pandas\core\indexing.py:2140)</text></g><g><title>_get_loc (pandas\core\indexing.py:628) (352 samples, 46.07%)</title><rect x="7.7225%" y="132" width="46.0733%" height="15" fill="rgb(213,79,30)"/><text x="7.9725%" y="142.50">_get_loc (pandas\core\indexing.py:628)</text></g><g><title>__init__ (playground\Non_DAG_with_Energy\utils\csv_reader.py:20) (377 samples, 49.35%)</title><rect x="4.5812%" y="84" width="49.3455%" height="15" fill="rgb(246,177,23)"/><text x="4.8312%" y="94.50">__init__ (playground\Non_DAG_with_Energy\utils\csv_reader.py:20)</text></g><g><title>_can_hold_identifiers_and_holds_name (pandas\core\indexes\base.py:3958) (9 samples, 1.18%)</title><rect x="54.1885%" y="116" width="1.1780%" height="15" fill="rgb(230,62,27)"/><text x="54.4385%" y="126.50"></text></g><g><title>is_object (pandas\core\indexes\base.py:1680) (9 samples, 1.18%)</title><rect x="54.1885%" y="132" width="1.1780%" height="15" fill="rgb(216,154,8)"/><text x="54.4385%" y="142.50"></text></g><g><title>__getattr__ (pandas\core\generic.py:5272) (14 samples, 1.83%)</title><rect x="54.0576%" y="100" width="1.8325%" height="15" fill="rgb(244,35,45)"/><text x="54.3076%" y="110.50">_..</text></g><g><title>get_value (pandas\core\indexes\base.py:4378) (11 samples, 1.44%)</title><rect x="56.2827%" y="132" width="1.4398%" height="15" fill="rgb(251,115,12)"/><text x="56.5327%" y="142.50"></text></g><g><title>__getitem__ (pandas\core\series.py:871) (31 samples, 4.06%)</title><rect x="56.2827%" y="116" width="4.0576%" height="15" fill="rgb(240,54,50)"/><text x="56.5327%" y="126.50">__ge..</text></g><g><title>get_value (pandas\core\indexes\base.py:4404) (10 samples, 1.31%)</title><rect x="59.0314%" y="132" width="1.3089%" height="15" fill="rgb(233,84,52)"/><text x="59.2814%" y="142.50"></text></g><g><title>__init__ (playground\Non_DAG_with_Energy\utils\csv_reader.py:21) (52 samples, 6.81%)</title><rect x="53.9267%" y="84" width="6.8063%" height="15" fill="rgb(207,117,47)"/><text x="54.1767%" y="94.50">__init__ ..</text></g><g><title>__getattr__ (pandas\core\generic.py:5273) (37 samples, 4.84%)</title><rect x="55.8901%" y="100" width="4.8429%" height="15" fill="rgb(249,43,39)"/><text x="56.1401%" y="110.50">__geta..</text></g><g><title>get_value (pandas\core\indexes\base.py:4378) (16 samples, 2.09%)</title><rect x="62.1728%" y="132" width="2.0942%" height="15" fill="rgb(209,38,44)"/><text x="62.4228%" y="142.50">g..</text></g><g><title>__getitem__ (pandas\core\series.py:871) (41 samples, 5.37%)</title><rect x="61.7801%" y="116" width="5.3665%" height="15" fill="rgb(236,212,23)"/><text x="62.0301%" y="126.50">__getit..</text></g><g><title>get_value (pandas\core\indexes\base.py:4404) (8 samples, 1.05%)</title><rect x="66.0995%" y="132" width="1.0471%" height="15" fill="rgb(242,79,21)"/><text x="66.3495%" y="142.50"></text></g><g><title>__init__ (playground\Non_DAG_with_Energy\utils\csv_reader.py:22) (51 samples, 6.68%)</title><rect x="60.7330%" y="84" width="6.6754%" height="15" fill="rgb(211,96,35)"/><text x="60.9830%" y="94.50">__init__ ..</text></g><g><title>__getattr__ (pandas\core\generic.py:5273) (43 samples, 5.63%)</title><rect x="61.7801%" y="100" width="5.6283%" height="15" fill="rgb(253,215,40)"/><text x="62.0301%" y="110.50">__getat..</text></g><g><title>get_value (pandas\core\indexes\base.py:4378) (15 samples, 1.96%)</title><rect x="68.9791%" y="132" width="1.9634%" height="15" fill="rgb(211,81,21)"/><text x="69.2291%" y="142.50">g..</text></g><g><title>__init__ (playground\Non_DAG_with_Energy\utils\csv_reader.py:24) (38 samples, 4.97%)</title><rect x="67.4084%" y="84" width="4.9738%" height="15" fill="rgb(208,190,38)"/><text x="67.6584%" y="94.50">__init..</text></g><g><title>__getattr__ (pandas\core\generic.py:5273) (30 samples, 3.93%)</title><rect x="68.4555%" y="100" width="3.9267%" height="15" fill="rgb(235,213,38)"/><text x="68.7055%" y="110.50">__ge..</text></g><g><title>__getitem__ (pandas\core\series.py:871) (28 samples, 3.66%)</title><rect x="68.7173%" y="116" width="3.6649%" height="15" fill="rgb(237,122,38)"/><text x="68.9673%" y="126.50">__ge..</text></g><g><title>get_value (pandas\core\indexes\base.py:4378) (12 samples, 1.57%)</title><rect x="73.8220%" y="132" width="1.5707%" height="15" fill="rgb(244,218,35)"/><text x="74.0720%" y="142.50"></text></g><g><title>__init__ (playground\Non_DAG_with_Energy\utils\csv_reader.py:25) (39 samples, 5.10%)</title><rect x="72.3822%" y="84" width="5.1047%" height="15" fill="rgb(240,68,47)"/><text x="72.6322%" y="94.50">__init..</text></g><g><title>__getattr__ (pandas\core\generic.py:5273) (31 samples, 4.06%)</title><rect x="73.4293%" y="100" width="4.0576%" height="15" fill="rgb(210,16,53)"/><text x="73.6793%" y="110.50">__ge..</text></g><g><title>__getitem__ (pandas\core\series.py:871) (29 samples, 3.80%)</title><rect x="73.6911%" y="116" width="3.7958%" height="15" fill="rgb(235,124,12)"/><text x="73.9411%" y="126.50">__ge..</text></g><g><title>get_value (pandas\core\indexes\base.py:4378) (10 samples, 1.31%)</title><rect x="78.9267%" y="132" width="1.3089%" height="15" fill="rgb(224,169,11)"/><text x="79.1767%" y="142.50"></text></g><g><title>__init__ (playground\Non_DAG_with_Energy\utils\csv_reader.py:26) (37 samples, 4.84%)</title><rect x="77.4869%" y="84" width="4.8429%" height="15" fill="rgb(250,166,2)"/><text x="77.7369%" y="94.50">__init..</text></g><g><title>__getattr__ (pandas\core\generic.py:5273) (27 samples, 3.53%)</title><rect x="78.7958%" y="100" width="3.5340%" height="15" fill="rgb(242,216,29)"/><text x="79.0458%" y="110.50">__g..</text></g><g><title>__getitem__ (pandas\core\series.py:871) (26 samples, 3.40%)</title><rect x="78.9267%" y="116" width="3.4031%" height="15" fill="rgb(230,116,27)"/><text x="79.1767%" y="126.50">__g..</text></g><g><title>get_value (pandas\core\indexes\base.py:4404) (8 samples, 1.05%)</title><rect x="81.2827%" y="132" width="1.0471%" height="15" fill="rgb(228,99,48)"/><text x="81.5327%" y="142.50"></text></g><g><title>get_value (pandas\core\indexes\base.py:4378) (15 samples, 1.96%)</title><rect x="82.9843%" y="132" width="1.9634%" height="15" fill="rgb(253,11,6)"/><text x="83.2343%" y="142.50">g..</text></g><g><title>__init__ (playground\Non_DAG_with_Energy\utils\csv_reader.py:27) (32 samples, 4.19%)</title><rect x="82.3298%" y="84" width="4.1885%" height="15" fill="rgb(247,143,39)"/><text x="82.5798%" y="94.50">__ini..</text></g><g><title>__getattr__ (pandas\core\generic.py:5273) (27 samples, 3.53%)</title><rect x="82.9843%" y="100" width="3.5340%" height="15" fill="rgb(236,97,10)"/><text x="83.2343%" y="110.50">__g..</text></g><g><title>__getitem__ (pandas\core\series.py:871) (27 samples, 3.53%)</title><rect x="82.9843%" y="116" width="3.5340%" height="15" fill="rgb(233,208,19)"/><text x="83.2343%" y="126.50">__g..</text></g><g><title>__getattr__ (pandas\core\generic.py:5272) (9 samples, 1.18%)</title><rect x="86.6492%" y="100" width="1.1780%" height="15" fill="rgb(216,164,2)"/><text x="86.8992%" y="110.50"></text></g><g><title>get_value (pandas\core\indexes\base.py:4378) (13 samples, 1.70%)</title><rect x="87.8272%" y="132" width="1.7016%" height="15" fill="rgb(220,129,5)"/><text x="88.0772%" y="142.50"></text></g><g><title>__getitem__ (pandas\core\series.py:871) (22 samples, 2.88%)</title><rect x="87.8272%" y="116" width="2.8796%" height="15" fill="rgb(242,17,10)"/><text x="88.0772%" y="126.50">__..</text></g><g><title>__init__ (playground\Non_DAG_with_Energy\utils\csv_reader.py:28) (33 samples, 4.32%)</title><rect x="86.5183%" y="84" width="4.3194%" height="15" fill="rgb(242,107,0)"/><text x="86.7683%" y="94.50">__ini..</text></g><g><title>__getattr__ (pandas\core\generic.py:5273) (23 samples, 3.01%)</title><rect x="87.8272%" y="100" width="3.0105%" height="15" fill="rgb(251,28,31)"/><text x="88.0772%" y="110.50">__g..</text></g><g><title>extract_array (pandas\core\construction.py:380) (8 samples, 1.05%)</title><rect x="92.1466%" y="148" width="1.0471%" height="15" fill="rgb(233,223,10)"/><text x="92.3966%" y="158.50"></text></g><g><title>get_value (pandas\core\indexes\base.py:4378) (11 samples, 1.44%)</title><rect x="92.0157%" y="132" width="1.4398%" height="15" fill="rgb(215,21,27)"/><text x="92.2657%" y="142.50"></text></g><g><title>__init__ (playground\Non_DAG_with_Energy\utils\csv_reader.py:29) (31 samples, 4.06%)</title><rect x="90.8377%" y="84" width="4.0576%" height="15" fill="rgb(232,23,21)"/><text x="91.0877%" y="94.50">__in..</text></g><g><title>__getattr__ (pandas\core\generic.py:5273) (24 samples, 3.14%)</title><rect x="91.7539%" y="100" width="3.1414%" height="15" fill="rgb(244,5,23)"/><text x="92.0039%" y="110.50">__g..</text></g><g><title>__getitem__ (pandas\core\series.py:871) (23 samples, 3.01%)</title><rect x="91.8848%" y="116" width="3.0105%" height="15" fill="rgb(226,81,46)"/><text x="92.1348%" y="126.50">__g..</text></g><g><title>&lt;module&gt; (test_simulation.py:26) (697 samples, 91.23%)</title><rect x="4.5812%" y="68" width="91.2304%" height="15" fill="rgb(247,70,30)"/><text x="4.8312%" y="78.50">&lt;module&gt; (test_simulation.py:26)</text></g><g><title>job_added_schedule (core\scheduler.py:25) (18 samples, 2.36%)</title><rect x="96.9895%" y="164" width="2.3560%" height="15" fill="rgb(212,68,19)"/><text x="97.2395%" y="174.50">j..</text></g><g><title>__call__ (playground\Non_DAG_with_Energy\algorithm\first_fit.py:7) (11 samples, 1.44%)</title><rect x="97.9058%" y="180" width="1.4398%" height="15" fill="rgb(240,187,13)"/><text x="98.1558%" y="190.50"></text></g><g><title>tasks_which_has_waiting_instance (core\cluster.py:45) (9 samples, 1.18%)</title><rect x="98.1675%" y="196" width="1.1780%" height="15" fill="rgb(223,113,26)"/><text x="98.4175%" y="206.50"></text></g><g><title>_resume (simpy\events.py:363) (27 samples, 3.53%)</title><rect x="96.2042%" y="132" width="3.5340%" height="15" fill="rgb(206,192,2)"/><text x="96.4542%" y="142.50">_re..</text></g><g><title>run (core\scheduler.py:96) (21 samples, 2.75%)</title><rect x="96.9895%" y="148" width="2.7487%" height="15" fill="rgb(241,108,4)"/><text x="97.2395%" y="158.50">ru..</text></g><g><title>all (764 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(247,173,49)"/><text x="0.2500%" y="62.50"></text></g><g><title>&lt;module&gt; (test_simulation.py:32) (32 samples, 4.19%)</title><rect x="95.8115%" y="68" width="4.1885%" height="15" fill="rgb(224,114,35)"/><text x="96.0615%" y="78.50">&lt;modu..</text></g><g><title>run (playground\Non_DAG_with_Energy\utils\episode.py:21) (32 samples, 4.19%)</title><rect x="95.8115%" y="84" width="4.1885%" height="15" fill="rgb(245,159,27)"/><text x="96.0615%" y="94.50">run (..</text></g><g><title>run (simpy\core.py:138) (32 samples, 4.19%)</title><rect x="95.8115%" y="100" width="4.1885%" height="15" fill="rgb(245,172,44)"/><text x="96.0615%" y="110.50">run (..</text></g><g><title>step (simpy\core.py:222) (29 samples, 3.80%)</title><rect x="96.2042%" y="116" width="3.7958%" height="15" fill="rgb(236,23,11)"/><text x="96.4542%" y="126.50">step..</text></g></svg></svg>